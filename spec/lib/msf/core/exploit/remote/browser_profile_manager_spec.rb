require 'msf/core'

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
RSpec.describe Msf::Exploit::Remote::BrowserProfileManager do

  subject(:exploit_remmote) {
    mod = Msf::Exploit::Remote.allocate
    mod.extend described_class
    mod
  }
=======
=======
>>>>>>> origin/chore/MSP-12110/celluloid-supervision-tree
=======
>>>>>>> origin/msf-complex-payloads
=======
>>>>>>> origin/msf-complex-payloads
=======
>>>>>>> origin/payload-generator.rb
describe Msf::Exploit::Remote::BrowserProfileManager do

  subject do
    mod = Msf::Exploit::Remote.allocate
    mod.extend described_class
    mod
  end
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> origin/4.11.2_release_pre-rails4
=======
>>>>>>> origin/chore/MSP-12110/celluloid-supervision-tree
=======
>>>>>>> origin/msf-complex-payloads
=======
>>>>>>> origin/msf-complex-payloads
=======
>>>>>>> origin/payload-generator.rb

  let(:default_profile) do
    {
      'PREFIX' => {'KEY'=>'VALUE'}
    }
  end

  before(:each) do
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    framework = double('framework', browser_profiles: default_profile)
    allow(exploit_remmote).to receive(:framework).and_return(framework)
=======
    framework = double('framework')
    allow(framework).to receive(:browser_profiles).and_return(default_profile)
    allow_any_instance_of(described_class).to receive(:framework).and_return(framework)
>>>>>>> origin/4.11.2_release_pre-rails4
=======
    framework = double('framework')
    allow(framework).to receive(:browser_profiles).and_return(default_profile)
    allow_any_instance_of(described_class).to receive(:framework).and_return(framework)
>>>>>>> origin/chore/MSP-12110/celluloid-supervision-tree
=======
    framework = double('framework')
    allow(framework).to receive(:browser_profiles).and_return(default_profile)
    allow_any_instance_of(described_class).to receive(:framework).and_return(framework)
>>>>>>> origin/msf-complex-payloads
=======
    framework = double('framework')
    allow(framework).to receive(:browser_profiles).and_return(default_profile)
    allow_any_instance_of(described_class).to receive(:framework).and_return(framework)
>>>>>>> origin/msf-complex-payloads
=======
    framework = double('framework')
    allow(framework).to receive(:browser_profiles).and_return(default_profile)
    allow_any_instance_of(described_class).to receive(:framework).and_return(framework)
>>>>>>> origin/payload-generator.rb
  end

  describe '#browser_profile_prefix' do
    it 'raises a NoMethodError' do
      expect{subject.browser_profile_prefix}.to raise_exception(NoMethodError)
    end
  end

  describe '#browser_profile' do
    before(:each) do
      allow(subject).to receive(:browser_profile_prefix).and_return('PREFIX')
    end

    it 'returns a hash for the profile' do
      expect(subject.browser_profile).to be_kind_of(Hash)
    end
  end

  describe '#clear_browser_profiles' do
    before(:each) do
      allow(subject).to receive(:browser_profile_prefix).and_return('PREFIX')
    end

    it 'clears profile cache' do
      expect(subject.browser_profile.length).to eq(1)
      subject.clear_browser_profiles
      expect(subject.browser_profile).to be_empty
    end
  end

end